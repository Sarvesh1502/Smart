const mongoose = require('mongoose');

const attendanceSchema = new mongoose.Schema({
  student: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  course: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Course',
    required: true
  },
  lecture: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Lecture',
    required: true
  },
  date: {
    type: Date,
    required: true
  },
  status: {
    type: String,
    enum: ['present', 'absent', 'late', 'excused'],
    required: true
  },
  joinTime: {
    type: Date
  },
  leaveTime: {
    type: Date
  },
  duration: {
    type: Number, // in minutes
    default: 0
  },
  // For live sessions
  liveSessionData: {
    jitsiRoomId: String,
    totalJoinTime: Number, // in minutes
    connectionQuality: {
      type: String,
      enum: ['excellent', 'good', 'fair', 'poor']
    },
    deviceInfo: {
      browser: String,
      os: String,
      device: String
    }
  },
  // For recorded lectures
  recordedSessionData: {
    videoUrl: String,
    watchTime: Number, // in minutes
    completionPercentage: Number,
    lastWatchedPosition: Number, // in seconds
    totalViews: {
      type: Number,
      default: 1
    }
  },
  // Additional notes
  notes: {
    type: String,
    trim: true
  },
  // Marked by (teacher/admin)
  markedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  // Auto-generated or manual
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  // Excuse information
  excuse: {
    reason: String,
    approvedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    approvedAt: Date,
    documents: [String] // URLs to supporting documents
  }
}, {
  timestamps: true
});

// Indexes for better performance
attendanceSchema.index({ student: 1, course: 1, date: 1 });
attendanceSchema.index({ course: 1, date: 1 });
attendanceSchema.index({ lecture: 1 });
attendanceSchema.index({ date: 1, status: 1 });

// Compound index for unique attendance per student per lecture
attendanceSchema.index({ student: 1, lecture: 1 }, { unique: true });

// Virtual for attendance percentage
attendanceSchema.virtual('isPresent').get(function() {
  return this.status === 'present' || this.status === 'late';
});

// Method to calculate duration
attendanceSchema.methods.calculateDuration = function() {
  if (this.joinTime && this.leaveTime) {
    this.duration = Math.round((this.leaveTime - this.joinTime) / (1000 * 60));
  }
  return this.duration;
};

// Method to mark as present
attendanceSchema.methods.markPresent = function(joinTime = new Date()) {
  this.status = 'present';
  this.joinTime = joinTime;
  this.isAutoGenerated = false;
  return this.save();
};

// Method to mark as absent
attendanceSchema.methods.markAbsent = function(notes = '') {
  this.status = 'absent';
  this.notes = notes;
  this.isAutoGenerated = false;
  return this.save();
};

// Method to mark as late
attendanceSchema.methods.markLate = function(joinTime = new Date(), notes = '') {
  this.status = 'late';
  this.joinTime = joinTime;
  this.notes = notes;
  this.isAutoGenerated = false;
  return this.save();
};

// Method to excuse absence
attendanceSchema.methods.excuseAbsence = function(reason, approvedBy, documents = []) {
  this.status = 'excused';
  this.excuse = {
    reason,
    approvedBy,
    approvedAt: new Date(),
    documents
  };
  return this.save();
};

// Static method to get attendance summary for a course
attendanceSchema.statics.getCourseAttendanceSummary = async function(courseId, startDate, endDate) {
  const pipeline = [
    {
      $match: {
        course: mongoose.Types.ObjectId(courseId),
        date: {
          $gte: startDate,
          $lte: endDate
        }
      }
    },
    {
      $group: {
        _id: '$student',
        totalClasses: { $sum: 1 },
        present: {
          $sum: {
            $cond: [{ $in: ['$status', ['present', 'late']] }, 1, 0]
          }
        },
        absent: {
          $sum: {
            $cond: [{ $eq: ['$status', 'absent'] }, 1, 0]
          }
        },
        excused: {
          $sum: {
            $cond: [{ $eq: ['$status', 'excused'] }, 1, 0]
          }
        }
      }
    },
    {
      $lookup: {
        from: 'users',
        localField: '_id',
        foreignField: '_id',
        as: 'student'
      }
    },
    {
      $unwind: '$student'
    },
    {
      $project: {
        student: {
          _id: '$student._id',
          name: '$student.name',
          email: '$student.email',
          rollNumber: '$student.studentInfo.rollNumber'
        },
        totalClasses: 1,
        present: 1,
        absent: 1,
        excused: 1,
        attendancePercentage: {
          $round: [
            {
              $multiply: [
                { $divide: ['$present', '$totalClasses'] },
                100
              ]
            },
            2
          ]
        }
      }
    },
    {
      $sort: { 'student.rollNumber': 1 }
    }
  ];

  return this.aggregate(pipeline);
};

// Static method to get attendance statistics
attendanceSchema.statics.getAttendanceStats = async function(courseId, dateRange) {
  const matchStage = { course: mongoose.Types.ObjectId(courseId) };
  
  if (dateRange) {
    matchStage.date = {
      $gte: dateRange.start,
      $lte: dateRange.end
    };
  }

  const pipeline = [
    { $match: matchStage },
    {
      $group: {
        _id: null,
        totalRecords: { $sum: 1 },
        present: {
          $sum: {
            $cond: [{ $in: ['$status', ['present', 'late']] }, 1, 0]
          }
        },
        absent: {
          $sum: {
            $cond: [{ $eq: ['$status', 'absent'] }, 1, 0]
          }
        },
        excused: {
          $sum: {
            $cond: [{ $eq: ['$status', 'excused'] }, 1, 0]
          }
        },
        averageDuration: { $avg: '$duration' }
      }
    }
  ];

  const result = await this.aggregate(pipeline);
  return result[0] || {
    totalRecords: 0,
    present: 0,
    absent: 0,
    excused: 0,
    averageDuration: 0
  };
};

module.exports = mongoose.model('Attendance', attendanceSchema);
